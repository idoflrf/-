题目描述：
X、Y两人进行猜单词游戏。X想出一个长度P个字母的单次（无重复字母，全小写），Y进行猜测。当Y提出一个猜测时，
X需要给出这个猜测是否正确的说明。如果Y给出的结果中有m个字母存在且位置正确，n个字母存在位置不正确，那么X
需要回答：m,n。现在给出若干次猜测的结果（包括Y提出的猜测单词以及X的回答），给出X想出的单词。（保证只有一
哥正确单词）
输入描述：
第一行输入单词长度P（1<=P<=26）
第二行输入Y猜测的次数N（0<N<100）
后续N行表示Y每一次猜测的数据，由三部分组成，各部分之间空格分隔：表示猜测单词的字符串 存在且位置正确的字母个数 
存在但位置不正确的字母个数
输出描述：
表示出x想出的单词的字符串
样例输入：
5
5
cloxy 3 0
cxmnu1 1
kcotd 2 1
apqud 2 0
bldwz 1 1
输出：
cloud
------------------------------------------------------------------------------------------------------
思路：暴力解直接push进所有出现过的字母遍历，但字母位数变多肯定会超时。
使用回溯算法也就是DFS加剪枝截断：以第k个字母为猜测顺序，比如第一个字母c必然出现在猜测的5个单词
第一位之中否则答案不可能唯一。
1、维护的条件是m与n，输入给出的m和n向量，猜测第k个字母（排除已经存在的字母）
并将新加入的字母与5个单词对比，过程中如果位置一样字母也一样m--，字母出现了但位置不一样n--；
2、如果m n没有出现小于0的情况则继续递归猜测下一位，如果小于0则m n回退到之前的情况
3、截断：第一种情况：如果5个单词的第k位字母都遍历了但还没找到符合m n条件的 则返回-1；
               第二种情况：如果是单词的最后一位了，m n虽然没有出现小于0但必须等于0了不符合则返回-1；
4、回到递归语句，如果下一位返回了-1则说明这个单词递归到后面找不到合适的情况，回退并继续猜测。
------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <string>
#include <sstream>
#include <vector>
#include <algorithm>
using namespace std;
/*v：猜过的第i个单词；m：第i个单词的m；n：同m；k：猜测第k个字母；s：最后要猜的字符串*/
int f(vector<string> v, vector<int>&m, vector<int>&n, int k,string &s)
{
	vector<char>r;//这一位已经猜过的字母
	for (int i = 0; i < 5; i++)
	{
		if (find(r.begin(), r.end(), v[i][k]) == r.end() && find(s.begin(), s.end(), v[i][k]) == s.end())//不能是已经猜过的不能是别的位出现过的
		{
			r.push_back(v[i][k]);//加入已经猜过的行列
			vector<int> t1 = m;//记录目前的m n以便回退
			vector<int> t2 = n;
			for (int j = 0; j < 5; j++)//与每个单词第k位比较来维护m，与除k外其他位比较来维护n。
			{
				if (v[j][k] == v[i][k])
					{
						m[j]--;
					}
				for (int p = 0; p < 5; p++)
				{
					if (p != k)
					{
						if (v[j][p] == v[i][k])
						{
					    n[j]--;
						}
					}

				}
			}
			int a = 0;
			for (int q = 0; q < 5; q++)
			{
				if (m[q] < 0 || n[q] < 0)//出现小于0回退
				{
					m = t1;
					n = t2;
					a = 1;
					break;
				}
			}
			if (a == 0)
			{
				s.push_back(v[i][k]);//
				if (s.size()==5)//如果已经是第五位了看是不是mn全为0如果不是则回退
				{
					if (m == vector<int>(5, 0) && n == vector<int>(5, 0))
					{
						return 1;
					}
					else
					{
						s.pop_back();
						m = t1;
						n = t2;
						continue;
					}
				}
				int b = f(v, m, n, k + 1, s);//如果不是第五位则继续递归下一位
				if (b == -1)//说明猜测的字母后面走不通，回退
				{
					s.pop_back();
					m = t1;
					n = t2;
					continue;

				}
				else//已经走通了 可以结束了（好像走到第五位才会触发结束）
				{
					break;
				}
			}  
		}
	}
	if (s.size()<=k)//如果5个单词的第k位都遍历完了没发现满足的，则返回-1告诉上一层递归回退
	{
		return -1;
	}
	//else
	//{
	//	return 1;
	//}
}
void main()
{
	string s;
	vector<string> v;
	v.push_back("cloxy");
	v.push_back("cxmnu");
	v.push_back("kcotd");
	v.push_back("apqud");
	v.push_back("bldwz");
	vector<int>m = {3,1,2,2,1};
	vector<int>n = {0,1,1,0,1};
	//只是自己做着玩没有其他样例所以只试验了样例
	f(v, m, n, 0, s);
	cout << s;
	system("pause");

}

